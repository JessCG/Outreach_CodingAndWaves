source('~/Dropbox/Ongoing/ODI_CodingActivities_Winter/Activity9/Activity9.R')
source('~/Dropbox/Ongoing/ODI_CodingActivities_Winter/Activity9/Activity9.R')
source('~/Dropbox/Ongoing/ODI_CodingActivities_Winter/Activity9/Activity9.R')
source('~/Documents/ODI/2018/CodingActivities/Activity9/Activity9.R')
source('~/Documents/ODI/2018/CodingActivities/Activity9/Activity9.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
setwd("~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData")
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
p
characteristics_list
list(
"Wavelength (graphing units):NUM" = L,
"Water level (graphing units):NUM" = W,
"Amplitude (graphing units):NUM" = A,
"Phase shift:NUM" = p
)
# Wavelength (graph units for now)
L <- characteristics.gu$wavelength.gu
# Water height
H <- characteristics.gu$water_height.gu
# Amplitude
A <- characteristics.gu$amplitude.gu
# Phase shift - only relevant if previously done
p <- characteristics.gu$phase.shift
# Bottom
B <- characteristics.gu$bottom.gu
# First crest
x_crest <- characteristics.gu$crest_x.gu
# Water level
W = H + B
# Wavenumber calculations
k <- 2*pi/L
# Horizontal grid
x <- seq(0, graph_dim, by = 1)
# Calculate max value of equation
y_max <- max(A*sin(k*x) + H)
# Calculate phase shift needed to align crests
p <- asin((y_max - H) / A) - k*x_crest
wave_files <- dir(path = framedir, pattern = '*_frame1.png')
wave_choice <- unlist(strsplit(wave_files, '(_.*)'))
conf = 0
Iwave = which(wave_choice == wave)
wave <- dlgList(wave_choice, multiple = FALSE,
title = "What wave would you like to analyze?")$res
msg <- paste("You selected ", wave, ". Is that ok?", sep ="")
if (okCancelBox(msg)) conf = 1  else conf = 0
Iwave = which(wave_choice == wave)
img <- readPNG(paste(framedir, wave_files[Iwave], sep = ""))  # load frame 1
g <- rasterGrob(img, interpolate=TRUE)
graph_dim <- 1000
img_sizeX <- 1920
img_sizeY <- 1200
characteristics_file <- paste(wave, "_characteristics_gu.csv", sep = "")
out_files <- dir(path = "./OutputFiles/")
if (any(out_files == characteristics_file)){
# if ruler file exists, load information
characteristics.gu <- read.csv(file = paste("./OutputFiles/",
characteristics_file, sep = ""),
header = TRUE)
} else {
# if characteristics don't exist, ask to complete task 1
msg <- "There are no wave characteristics file for the wave you selected, you must first identify these."
res <- dlgMessage(msg,  type = c("ok"))$res
return()
}  # end of checking for characteristics
characteristics.gu$phase.shift <- 0
L <- characteristics.gu$wavelength.gu
H <- characteristics.gu$water_height.gu
A <- characteristics.gu$amplitude.gu
p <- characteristics.gu$phase.shift
B <- characteristics.gu$bottom.gu
x_crest <- characteristics.gu$crest_x.gu
W = H + B
k <- 2*pi/L
x <- seq(0, graph_dim, by = 1)
y_max <- max(A*sin(k*x) + H)
y_max
p <- asin((y_max - H) / A) - k*x_crest
p
characteristics_list <- list(
"Wavelength (graphing units):NUM" = L,
"Water level (graphing units):NUM" = W,
"Amplitude (graphing units):NUM" = A,
"Phase shift:NUM" = p
)
characteristics_list
y_wave <- A*sin(k*x + p) + H
wave_data <- data.frame(x, y_wave)
Icrest = which(y_wave == max(y_wave))
q <- # Plot
qplot(1:graph_dim, 1:graph_dim*(img_sizeY/img_sizeX), geom="blank", xlab = "x", ylab = "y") +
# Modify grids
theme_bw() +
theme(panel.grid.major = element_line(colour="darkgrey", size=0.5)) +
scale_x_continuous(minor_breaks = seq(-100, 1100, 50)) +
scale_y_continuous(minor_breaks = seq(-100, 1100, 50)) +
# Add image
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) +
# Add wave
geom_point(data = wave_data, mapping =
aes(x = x, y = y_wave+B), alpha = 0.05,
colour = 'blue', fill = "blue", size = 2) +
# Add fixed coordinates
coord_fixed()
plot(q)
source('~/Documents/ODI/2018/CodingActivities/ODI_ProcessingWaveTankData/SupportFiles/FitToFrame1.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
source('~/Documents/ODI/2018/CodingActivities/Activity9/ForJess/Activity9_Solution_wave1.R')
setwd("~/Documents/ODI/2018/CodingActivities/Activity9/ForJess")
source('~/Documents/ODI/2018/CodingActivities/Activity9/ForJess/Activity9_Solution_wave1.R')
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
setwd("~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData")
source('~/Documents/ODI/2018/CodingActivities/ProcessingWaveTankData/ProcessingWaveTankData.R')
