6, 6)
}
fname_skull = "./SupportFiles/skull.png"
img_skull <- readPNG(fname_skull)  # load runner
setwd("~/Documents/ODI/2018/CodingActivities/Activity4")
fname_runner = "./SupportFiles/runner.png"
img_runner <- readPNG(fname_runner)  # load runner
fname_skull = "./SupportFiles/skull.png"
img_skull <- readPNG(fname_skull)  # load runner
if (cross == 1){
rasterImage(img_skull, 0, 0, 6, 6)  # skull image
}
if (cross == 1){
rasterImage(img_skull, 0, 0, 6, 6)  # skull image
stop("You crossed a wall and died.")
}
rect(0, 0, 6, 6,
col = "black", border=par("fg"), lty=NULL, lwd=par("lwd"), xpd=FALSE)
rasterImage(img_runner, x_position2+0.1, y_position2+0.1,
x_position2+0.8, y_position2+0.8)
?pause
fname_fireworks = "./SupportFiles/fireworks.png"
img_fireworks <- readPNG(fname_fireworks)  # load skull
Sys.sleep(2)
rasterImage(img_skull, 0, 0, 6, 6)  # fireworks image
Sys.sleep(2)
rasterImage(img_fireworks, 0, 0, 6, 6)  # fireworks image
source("Activity4.R")
fname_runner = "./SupportFiles/runner.png"
img_runner <- readPNG(fname_runner)  # load runner
fname_skull = "./SupportFiles/skull.png"
img_skull <- readPNG(fname_skull)  # load skull
fname_fireworks = "./SupportFiles/fireworks.png"
img_fireworks <- readPNG(fname_fireworks)  # load skull
all_maze <- c(1, 2, 3)
conf = 0
while (conf == 0){  # will keep going until confirmed
# Drop down menu
maze <- dlgList(all_maze, multiple = FALSE,
title = "What maze will you be solving?")$maze
# Ask for confirmation
msg <- paste("You selected maze #", maze, ". Is that ok?", sep ="")
if (okCancelBox(msg)) conf = 1  else conf = 0
}
walls = read.csv(paste("./SupportFiles/Walls_", maze, ".csv", sep = ""))
positions = read.csv(paste("./SupportFiles/Positions_", maze, ".csv", sep = ""))
par(pty="s")
plot(1:6, type = 'n', main = "Help your friend reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
rect(0, 0, 6, 6,
col= "black", border=par("fg"), lty=NULL, lwd=par("lwd"), xpd=FALSE)
par(pty="s")
plot(1:6, type = 'n', main = "Get help from the architect to reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
rect(0, 0, 6, 6,
col= "black", border=par("fg"), lty=NULL, lwd=par("lwd"), xpd=FALSE)
rasterImage(img_runner, positions$x_start+0.1, positions$y_start+0.1,
positions$x_start+0.8, positions$y_start+0.8)
message1 = paste("Tell the architect at what x and y coordinates you are starting.",
"This way, s/he can find the right plans.")
msgBox(message1)
x_or_y = c('x-direction', 'y-direction')
displacement = -6:6
x_position1 = positions$x_start
y_position1 = positions$y_start
Sys.sleep(2)
game = 1
conf = 0
while (conf == 0){  # will keep going until confirmed
# Drop down menu for direction
res <- dlgList(x_or_y, multiple = FALSE,
title = "In what direction will you move?")$res
# Drop down menu for how many spaces
msg <- paste("How many spaces in the ", res,
"? Make sure to indicate positive or negative.", sep = "")
nspace <- dlgList(displacement, multiple = FALSE,
title = msg)$res
# Ask for confirmation
msg <- paste("You will move ", nspace, " space in the ", res, ". Is that ok?", sep ="")
if (okCancelBox(msg)) conf = 1  else conf = 0
}
if (res == "x-direction"){
x_position2 <- x_position1 + as.numeric(nspace)
y_position2 <- y_position1
}
if (res == "y-direction"){
y_position2 <- y_position1 + as.numeric(nspace)
x_position2 <- x_position1
}
cross = 0
if (res == "x-direction"){
path_x <- (x_position1 : x_position2)
path_y <- y_position1 + 0.5  # 0.5 ignores horizontal walls
for (ipath in 1:length(path_x)){
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
}
}
}
if (res == "y-direction"){
path_x <- x_position1 + 0.5  # 0.5 ignores vertical walls
path_y = (y_position1 : y_position2)
for (ipath in 1:length(path_x)){
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y[ipath] >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
}
}
}
if (cross == 1){
rasterImage(img_skull, 0, 0, 6, 6)  # skull image
stop("You crossed a wall and died.")
}
rect(0, 0, 6, 6,
col = "black", border=par("fg"), lty=NULL, lwd=par("lwd"), xpd=FALSE)
rasterImage(img_runner, x_position2+0.1, y_position2+0.1,
x_position2+0.8, y_position2+0.8)
if (x_position2 == positions$x_end && y_position2 == positions$y_end){
Sys.sleep(2)
rasterImage(img_fireworks, 0, 0, 6, 6)  # fireworks image
}
x_position1 <- x_position2
y_position1 <- y_position2
for (game in 1:50){
# Ask in what direction to move
conf = 0
while (conf == 0){  # will keep going until confirmed
# Drop down menu for direction
res <- dlgList(x_or_y, multiple = FALSE,
title = "In what direction will you move?")$res
# Drop down menu for how many spaces
msg <- paste("How many spaces in the ", res,
"? Make sure to indicate positive or negative.", sep = "")
nspace <- dlgList(displacement, multiple = FALSE,
title = msg)$res
# Ask for confirmation
msg <- paste("You will move ", nspace, " space in the ", res, ". Is that ok?", sep ="")
if (okCancelBox(msg)) conf = 1  else conf = 0
}
# change runner's position
if (res == "x-direction"){
x_position2 <- x_position1 + as.numeric(nspace)
y_position2 <- y_position1
}
if (res == "y-direction"){
y_position2 <- y_position1 + as.numeric(nspace)
x_position2 <- x_position1
}
## Test if runner will hit a wall
# 0.5 added to ignore walls next to us, only crossings
cross = 0
if (res == "x-direction"){
path_x <- (x_position1 : x_position2)
path_y <- y_position1 + 0.5  # 0.5 ignores horizontal walls
for (ipath in 1:length(path_x)){
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
}
}
}
if (res == "y-direction"){
path_x <- x_position1 + 0.5  # 0.5 ignores vertical walls
path_y = (y_position1 : y_position2)
for (ipath in 1:length(path_x)){
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y[ipath] >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
}
}
}
# If runner crossed a wall: die
if (cross == 1){
rasterImage(img_skull, 0, 0, 6, 6)  # skull image
stop("You crossed a wall and died.")
}
# Add a black square (the room is dark)
rect(0, 0, 6, 6,
col = "black", border=par("fg"), lty=NULL, lwd=par("lwd"), xpd=FALSE)
# Plot the runner at the new position
rasterImage(img_runner, x_position2+0.1, y_position2+0.1,
x_position2+0.8, y_position2+0.8)
# If runner gets to the end: success!
if (x_position2 == positions$x_end && y_position2 == positions$y_end){
Sys.sleep(2)
rasterImage(img_fireworks, 0, 0, 6, 6)  # fireworks image
}
# End position becomes start position
x_position1 <- x_position2
y_position1 <- y_position2
}
source("Activity4.R")
conf = 0
while (conf == 0){  # will keep going until confirmed
# Drop down menu for direction
res <- dlgList(x_or_y, multiple = FALSE,
title = "In what direction will you move?")$res
if (res == 'end the game'){stop("You ended the game.")}
# Drop down menu for how many spaces
msg <- paste("How many spaces in the ", res,
"? Make sure to indicate positive or negative.", sep = "")
nspace <- dlgList(displacement, multiple = FALSE,
title = msg)$res
# Ask for confirmation
msg <- paste("You will move ", nspace, " space in the ", res, ". Is that ok?", sep ="")
if (okCancelBox(msg)) conf = 1  else conf = 0
}
nspace
as.numeric(nspace)
res == "y-direction"
y_position1
positions$y_start
y_position1 = positions$y_start
y_position1
y_position2 <- y_position1 + as.numeric(nspace)
y_position2
source("Activity4.R")
source("Activity4.R")
iwall
walls(:,19)
walls[:,19]
walls[,19]
walls[1:4,19]
walls[19,1:4]
path_x <= max(walls$x1[iwall], walls$x2[iwall])
path_x >= min(walls$x1[iwall], walls$x2[iwall])
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall])
source("Activity4.R")
size(walls$x1)
length(walls$x1)
source("Activity4.R")
x_position2
y_position2
path_x
x_position 1
x_position1
x_position1 = 3
y_position1
nspace = -3
x_position1 = 3
y_position1 = 2
x_position2 = 0
y_position2 = 2
res = "x-direction"
par(pty="s")
plot(1:6, type = 'n', main = "Help your friend reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
segments(walls$x1, walls$y1, walls$x2, walls$y2)
dots_x = rep(seq(0.5, 5.5, by = 1), times = 6)
dots_y = rep(seq(0.5, 5.5, by = 1), each = 6)
points(dots_x, dots_y)
rasterImage(img_runner, x_position1+0.1, y_position1+0.1,
x_position1+0.8, y_position1+0.8)
cross = 0
res == "x-direction"
x_position1 = 3
y_position1 = 2
x_position2 = 0
y_position2 = 2
path_x <- (x_position1 : x_position2)
path_x
path_y <- y_position1 + 0.5  # 0.5 ignores horizontal walls
path_y
ipath = 1
length(path_x)
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
ipath = 2
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
ipath = 3
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
ipath = 4
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x[ipath] >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
walls(10, )
walls[10, ]
cross = 0
if (res == "x-direction"){
path_x <- (x_position1 : x_position2)
path_y <- y_position1 + 0.5  # 0.5 ignores horizontal walls
for (ipath in 1:length(path_x)){
for (iwall in 1:length(walls$x1)){
if (path_x[ipath] <= max(walls$x1[iwall]-0.1, walls$x2[iwall]-0.1) &&
path_x[ipath] >= min(walls$x1[iwall]-0.1, walls$x2[iwall]-0.1) &&
path_y <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
}
}
cross
source("Activity4.R")
?exit
?stop
x_position1 = 4
y_position1 = 5
x_position2 = 4
y_position2 = 1
res = "x-direction"
frame()
res = "y-direction"
par(pty="s")
plot(1:6, type = 'n', main = "Help your friend reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
segments(walls$x1, walls$y1, walls$x2, walls$y2)
dots_x = rep(seq(0.5, 5.5, by = 1), times = 6)
dots_y = rep(seq(0.5, 5.5, by = 1), each = 6)
points(dots_x, dots_y)
rasterImage(img_runner, x_position1+0.1, y_position1+0.1,
x_position1+0.8, y_position1+0.8)
cross = 0
res == "x-direction"
res == "y-direction"
path_x <- x_position1 + 0.5  # 0.5 ignores vertical walls
path_x
path_y = (y_position1 : y_position2)
path_y
ipath = 1
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall]-0.1, walls$y2[iwall]-0.1) &&
path_y[ipath] >= min(walls$y1[iwall]-0.1, walls$y2[iwall]-0.1)) cross = 1
print(cross)
}
ipath = 2
path_y(2)
path_y[2]
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall]-0.1, walls$y2[iwall]-0.1) &&
path_y[ipath] >= min(walls$y1[iwall]-0.1, walls$y2[iwall]-0.1)) cross = 1
print(cross)
}
source("Activity4.R")
source("Activity4.R")
round(0.5)
ceil(0.5):floor(4.5)
ceiling(0.5):floor(4.5)
ceiling(0.5):floor(-4.5)
ceiling(0.5):floor(0.5)
ceiling(0.5):floor(2.5)
ceiling(0.5):floor(1.5)
floor(0.5):ceil(0.5)
floor(0.5):ceiling(0.5)
nspace = -3
x_position1 = 4
y_position1 = 5
x_position2 = 4
y_position2 = 2
res = "y-direction"
par(pty="s")
plot(1:6, type = 'n', main = "Help your friend reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
segments(walls$x1, walls$y1, walls$x2, walls$y2)
dots_x = rep(seq(0.5, 5.5, by = 1), times = 6)
dots_y = rep(seq(0.5, 5.5, by = 1), each = 6)
points(dots_x, dots_y)
rasterImage(img_runner, x_position1+0.1, y_position1+0.1,
x_position1+0.8, y_position1+0.8)
nspace = -3
x_position1 = 4.5
y_position1 = 5.5
x_position2 = 4.5
y_position2 = 2.5
res = "y-direction"
par(pty="s")
plot(1:6, type = 'n', main = "Help your friend reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
segments(walls$x1, walls$y1, walls$x2, walls$y2)
dots_x = rep(seq(0.5, 5.5, by = 1), times = 6)
dots_y = rep(seq(0.5, 5.5, by = 1), each = 6)
points(dots_x, dots_y)
rasterImage(img_runner, x_position1-0.5+0.1, y_position1-0.5+0.1,
x_position1-0.5+0.8, y_position1-0.5+0.8)
cross = 0
res == "x-direction"
res == "y-direction"
path_x <- x_position1
nspace > 0
nspace == 0
nspace < 0
if (nspace < 0) {path_y = (floor(y_position1) : ceiling(y_position2))}
path_y
ipath = 1
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y[ipath] >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
ipath
ipath = 2
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y[ipath] >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
length(path_y)
ipath <- 3
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y[ipath] >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
y_position2 = 1.5
res = "y-direction"
ipath
length(path_y)
if (nspace < 0) {path_y = (floor(y_position1) : ceiling(y_position2))}
length(path_y)
ipath = 4
for (iwall in 1:length(walls$x1)){
if (path_x <= max(walls$x1[iwall], walls$x2[iwall]) &&
path_x >= min(walls$x1[iwall], walls$x2[iwall]) &&
path_y[ipath] <= max(walls$y1[iwall], walls$y2[iwall]) &&
path_y[ipath] >= min(walls$y1[iwall], walls$y2[iwall])) cross = 1
print(cross)
}
source("Activity4.R")
source("Activity4.R")
source("Activity4.R")
nspace = 4
x_position1 = 0.5
y_position1 = 5.5
x_position2 = 4.5
y_position2 = 5.5
res = "x-direction"
par(pty="s")
plot(1:6, type = 'n', main = "Help your friend reach the end of the maze!",
xlab = "x", ylab = "y", xlim = c(0, 6), ylim = c(0, 6),
axes = FALSE, asp = 1)
axis(1, at = seq(0, 6))
axis(2, at = seq(0, 6))
segments(walls$x1, walls$y1, walls$x2, walls$y2)
dots_x = rep(seq(0.5, 5.5, by = 1), times = 6)
dots_y = rep(seq(0.5, 5.5, by = 1), each = 6)
points(dots_x, dots_y)
rasterImage(img_runner, x_position1-0.5+0.1, y_position1-0.5+0.1,
x_position1-0.5+0.8, y_position1-0.5+0.8)
res == "x-direction"
cross = 0
path_y <- y_position1
if (nspace > 0) {path_y = (ceiling(y_position1) : floor(y_position2))}
if (nspace < 0) {path_y = (floor(y_position1) : ceiling(y_position2))}
if (nspace == 0) {next}
path_y
source("Activity4.R")
source("Activity4.R")
source("Activity4.R")
source("Activity4.R")
setwd("~/Documents/ODI/2018/CodingActivities/Activity4/SupportFiles")
source("Activity4_MazeMaker.R")
